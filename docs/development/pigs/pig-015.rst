.. include:: ../../references.txt

.. _pig-015:

***********************
PIG 15 - Data reduction
***********************

* Author: Axel Donath
* Created: June 30th, 2019
* Accepted:
* Status:
* Discussion:

Abstract
========
One of the most important features of Gammapy are binned likelihood analyses.
To perform such an analysis, the event data as well as instrument response
functions must be prepared and binned into or reduced to a discrete data
structure (maps or spectra), with the a binning specified by the user.
For analyses including O(1e2) - O(1e3) observations and a combined spatial
and spectral analysis this data reduction step can be computationally costly.
At the same time we have to provide a simple and flexible user interface.

The data reduction also includes stacking

In general the responsibilities can be shared between the `MapDataset`
and e.g. a `MapMaker` class.


What we have
============

`MapMaker`, `MapMakerRing`, `IRFMapMaker`
`make_mean_psf()`,, `make_mean_edisp()`, `make_psf`, `IRFStacker`


The `MapDataset` already has the responsibility to cutout and reproject
parts of the exposure map and interpolating the correct PSF and Edisp
for a given source / model component.


Proposal
========
The general proposed work-flow for data reduction is as follows:

- Choose MapGeom for counts and background
- Choose MapGeom for exposure, PSFMap and EDispMap
_ Compute a dataset per observation, compute safe mask, but don't apply. This
give users the possibility to change the safe data range later.
- Safe mask is only applied for stacking and during fitting.

Introduce `MapDataset.to_image()` to sum over energy axes and compute weighted
exposure and PSF maps?


Adding `.stack()` methods
-------------------------
First we propose to add `.stack()` methods to multiple other classes and data structures
in Gammapy. This includes:

- `MapDataset.stack()`
- `SpectrumDatasetOnOff.stack()`
- `EnergyDispersion.stack()`
- `PSFKernel.stack()`
- `Map.stack()` or `Map.paste()`

For now we assume that only datasets or objects with compatible bin-sizes
and aligned WCS or HPX representations can be stacked. Later we could add the
possibility to stack non-aligned data structures by introducing an additional
interpolation step.

A typical example for in-memory stacking looks as following:

.. code::

    dataset_stacked = MapDataset.create(geom, geom_irf)

    for dataset in datasets:
        dataset_stacked.stack(dataset)


The stacking is performed in-place, which is more memory efficient.

Adding `.from_geom()` methods
-----------------------------
Add the possibility to create empty datasets, EnergyDispersion, PSFMap, EdispMap objects etc.



`MapDatasetEstimator`
---------------------
Implementation detail...
Re-use FoV coordinates, share code for time-averaging, etc.


`SpectrumDatasetEstimator`
--------------------------


`DatasetsEstimator`
-------------------
Loop over observations, parallelisation, bookkeeping, convenience.


`.stack(datasets)`
`.read_stack(filenames, obs_ids)`

`.run(obervations)`
`.run_write(observations)`




`BackgroundEstimator`
---------------------
Reflected, ring, adaptive ring etc.


Alternatives
============


List of Proposed Pull Requests
==============================
We propose to implement the functionality via the following pull requests:

1. Implement `MapDatasetEstimator`
2. Implement `DatasetsEstimator`
3. Implement `MapDataset.stack()` method
4. Implement `SpectrumDatasetOnOff.stack()` method
5. Implement `EnergyDispersion.stack()` method




Decision
========


